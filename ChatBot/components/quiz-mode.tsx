"use client"

import { useState, useEffect } from "react"
import { Button } from "./ui/button"
import { Card } from "./ui/card"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "./ui/dialog"
import { Badge } from "./ui/badge"
import { Progress } from "./ui/progress"
import { CheckCircle, XCircle, Clock, Trophy, RotateCcw } from "lucide-react"

interface QuizModeProps {
  onClose: () => void
}

interface QuizQuestion {
  id: string
  question: string
  options: string[]
  correctAnswer: number
  explanation: string
  category: string
  difficulty: "Easy" | "Medium" | "Hard"
}

interface QuizResult {
  score: number
  totalQuestions: number
  timeSpent: number
  correctAnswers: number[]
  userAnswers: number[]
}

export function QuizMode({ onClose }: QuizModeProps) {
  const [quizStarted, setQuizStarted] = useState(false)
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null)
  const [userAnswers, setUserAnswers] = useState<number[]>([])
  const [timeLeft, setTimeLeft] = useState(300) // 5 minutes
  const [quizCompleted, setQuizCompleted] = useState(false)
  const [quizResult, setQuizResult] = useState<QuizResult | null>(null)
  const [isGenerating, setIsGenerating] = useState(false)

  // Mock quiz questions - in real app, these would be generated by AI
  const [questions, setQuestions] = useState<QuizQuestion[]>([
    {
      id: "1",
      question: "What is the time complexity of binary search?",
      options: ["O(n)", "O(log n)", "O(n log n)", "O(1)"],
      correctAnswer: 1,
      explanation:
        "Binary search divides the search space in half with each comparison, resulting in O(log n) time complexity.",
      category: "Algorithms",
      difficulty: "Easy",
    },
    {
      id: "2",
      question: "Which data structure uses LIFO (Last In, First Out) principle?",
      options: ["Queue", "Stack", "Array", "Linked List"],
      correctAnswer: 1,
      explanation: "A stack follows the LIFO principle where the last element added is the first one to be removed.",
      category: "Data Structures",
      difficulty: "Easy",
    },
  ])

  useEffect(() => {
    let timer: NodeJS.Timeout
    if (quizStarted && timeLeft > 0 && !quizCompleted) {
      timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000)
    } else if (timeLeft === 0 && !quizCompleted) {
      completeQuiz()
    }
    return () => clearTimeout(timer)
  }, [quizStarted, timeLeft, quizCompleted])

  const generateQuiz = async () => {
    setIsGenerating(true)

    try {
      // In real implementation, this would call the API to generate questions
      await new Promise((resolve) => setTimeout(resolve, 1000)) // Simulate API call

      // For now, use mock questions
      setQuizStarted(true)
      setCurrentQuestionIndex(0)
      setUserAnswers([])
      setSelectedAnswer(null)
      setTimeLeft(300)
      setQuizCompleted(false)
      setQuizResult(null)
    } catch (error) {
      console.error("Failed to generate quiz:", error)
    } finally {
      setIsGenerating(false)
    }
  }

  const handleAnswerSelect = (answerIndex: number) => {
    setSelectedAnswer(answerIndex)
  }

  const handleNextQuestion = () => {
    if (selectedAnswer !== null) {
      const newAnswers = [...userAnswers, selectedAnswer]
      setUserAnswers(newAnswers)

      if (currentQuestionIndex < questions.length - 1) {
        setCurrentQuestionIndex(currentQuestionIndex + 1)
        setSelectedAnswer(null)
      } else {
        completeQuiz(newAnswers)
      }
    }
  }

  const completeQuiz = (answers = userAnswers) => {
    const correctAnswers = questions.map((q) => q.correctAnswer)
    const score = answers.reduce((acc, answer, index) => {
      return acc + (answer === correctAnswers[index] ? 1 : 0)
    }, 0)

    setQuizResult({
      score: Math.round((score / questions.length) * 100),
      totalQuestions: questions.length,
      timeSpent: 300 - timeLeft,
      correctAnswers,
      userAnswers: answers,
    })
    setQuizCompleted(true)
  }

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins}:${secs.toString().padStart(2, "0")}`
  }

  const currentQuestion = questions[currentQuestionIndex]

  return (
    <Dialog open={true} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Trophy className="h-5 w-5" />
            Quiz Mode
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          {!quizStarted ? (
            <div className="text-center py-8">
              <Trophy className="h-16 w-16 text-primary mx-auto mb-4" />
              <h3 className="text-xl font-semibold mb-2">DSA Knowledge Quiz</h3>
              <p className="text-muted-foreground mb-6">
                Test your understanding of data structures and algorithms with a timed quiz.
              </p>

              <div className="bg-muted p-4 rounded-lg mb-6 text-sm">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <strong>Questions:</strong> {questions.length}
                  </div>
                  <div>
                    <strong>Time Limit:</strong> 5 minutes
                  </div>
                  <div>
                    <strong>Difficulty:</strong> Mixed
                  </div>
                  <div>
                    <strong>Topics:</strong> DSA Fundamentals
                  </div>
                </div>
              </div>

              <Button onClick={generateQuiz} disabled={isGenerating} size="lg">
                {isGenerating ? "Generating Quiz..." : "Start Quiz"}
              </Button>
            </div>
          ) : quizCompleted && quizResult ? (
            <div className="text-center py-8">
              <div
                className={`h-16 w-16 mx-auto mb-4 rounded-full flex items-center justify-center ${
                  quizResult.score >= 70 ? "bg-green-100 text-green-600" : "bg-red-100 text-red-600"
                }`}
              >
                {quizResult.score >= 70 ? <CheckCircle className="h-8 w-8" /> : <XCircle className="h-8 w-8" />}
              </div>

              <h3 className="text-2xl font-bold mb-2">{quizResult.score}%</h3>
              <p className="text-muted-foreground mb-6">
                You got{" "}
                {quizResult.userAnswers.filter((answer, index) => answer === quizResult.correctAnswers[index]).length}{" "}
                out of {quizResult.totalQuestions} questions correct
              </p>

              <div className="grid grid-cols-2 gap-4 mb-6">
                <Card className="p-4">
                  <div className="text-2xl font-bold text-primary">{formatTime(quizResult.timeSpent)}</div>
                  <div className="text-sm text-muted-foreground">Time Spent</div>
                </Card>
                <Card className="p-4">
                  <div className="text-2xl font-bold text-primary">{quizResult.score >= 70 ? "Pass" : "Retry"}</div>
                  <div className="text-sm text-muted-foreground">Result</div>
                </Card>
              </div>

              <div className="space-y-2 mb-6">
                {questions.map((question, index) => (
                  <div key={question.id} className="flex items-center justify-between p-3 bg-muted rounded">
                    <span className="text-sm">Question {index + 1}</span>
                    {quizResult.userAnswers[index] === quizResult.correctAnswers[index] ? (
                      <CheckCircle className="h-5 w-5 text-green-600" />
                    ) : (
                      <XCircle className="h-5 w-5 text-red-600" />
                    )}
                  </div>
                ))}
              </div>

              <div className="flex gap-2 justify-center">
                <Button
                  onClick={() => {
                    setQuizStarted(false)
                    setQuizCompleted(false)
                    setQuizResult(null)
                  }}
                >
                  <RotateCcw className="h-4 w-4 mr-2" />
                  Try Again
                </Button>
                <Button variant="outline" onClick={onClose}>
                  Close
                </Button>
              </div>
            </div>
          ) : (
            <div className="space-y-6">
              {/* Quiz Header */}
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <Badge variant="outline">
                    Question {currentQuestionIndex + 1} of {questions.length}
                  </Badge>
                  <Badge variant="secondary">{currentQuestion.category}</Badge>
                  <Badge
                    variant={
                      currentQuestion.difficulty === "Easy"
                        ? "secondary"
                        : currentQuestion.difficulty === "Medium"
                          ? "default"
                          : "destructive"
                    }
                  >
                    {currentQuestion.difficulty}
                  </Badge>
                </div>
                <div className="flex items-center gap-2 text-sm">
                  <Clock className="h-4 w-4" />
                  {formatTime(timeLeft)}
                </div>
              </div>

              {/* Progress */}
              <Progress value={((currentQuestionIndex + 1) / questions.length) * 100} />

              {/* Question */}
              <Card className="p-6">
                <h3 className="text-lg font-medium mb-4">{currentQuestion.question}</h3>

                <div className="space-y-3">
                  {currentQuestion.options.map((option, index) => (
                    <button
                      key={index}
                      onClick={() => handleAnswerSelect(index)}
                      className={`w-full p-4 text-left rounded-lg border transition-colors ${
                        selectedAnswer === index
                          ? "border-primary bg-primary/5"
                          : "border-border hover:border-primary/50"
                      }`}
                    >
                      <div className="flex items-center gap-3">
                        <div
                          className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${
                            selectedAnswer === index
                              ? "border-primary bg-primary text-primary-foreground"
                              : "border-muted-foreground"
                          }`}
                        >
                          {String.fromCharCode(65 + index)}
                        </div>
                        <span>{option}</span>
                      </div>
                    </button>
                  ))}
                </div>
              </Card>

              {/* Navigation */}
              <div className="flex justify-between">
                <Button variant="outline" onClick={onClose}>
                  Exit Quiz
                </Button>
                <Button onClick={handleNextQuestion} disabled={selectedAnswer === null}>
                  {currentQuestionIndex === questions.length - 1 ? "Finish Quiz" : "Next Question"}
                </Button>
              </div>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  )
}
